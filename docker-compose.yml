version: '3'
x-airflow-common:
  &airflow-common
  #image: new_airflow:latest
  image: patw47/airflow_crime_chicago:1.0
  environment:
    &airflow-common-env
    PYTHONPATH: "/opt/airflow:${PYTHONPATH}"
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow_crime_chicago/dags:/opt/airflow/dags
    - ./airflow_crime_chicago/logs:/opt/airflow/logs
    - ./airflow_crime_chicago/plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./src:/opt/airflow/src
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

    #conteneur api
  api:
    image: patw47/src_api:1.0
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src_api:/app/src_api

  #conteneur tests
  tests:
    image: patw47/tests:1.0 #ajouter image du dockerhub
    ports:
      - "8081:8081"
    volumes:
      - ./tests:/app/tests

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type TriggererJob"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Initialization commands go here
        airflow db init
        airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email airflow@example.com \
          --password ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    restart: on-failure

  airflow-cli:
    <<: *airflow-common
    command: version
    restart: on-failure

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    restart: always

  mlflow_server:
      image: my_mlflow_server:latest
      ports:
        - "8080:8080"
      volumes:
        - ./mlflow_server_data:/mlruns
      networks:
        - global
  mlflow_ui:
      image: my_mlflow_ui:latest
      ports:
        - "5000:5000"
      volumes:
        - ./mlflow_server_data:/mlruns
      networks:
        - global
  training:
      image: my_training:latest
      volumes:
        - ../data:/data
      depends_on:
        - mlflow_server
      networks:
        - global
networks:
  global:

volumes:
  postgres-db-volume:



